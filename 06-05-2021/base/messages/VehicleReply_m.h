//
// Generated file, do not edit! Created by nedtool 5.0 from veins/modules/Prext/base/messages/VehicleReply.msg.
//

#ifndef __VEHICLEREPLY_M_H
#define __VEHICLEREPLY_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <veins/base/utils/Coord.h>
#include <veins/modules/messages/WaveShortMessage_m.h>
// }}

/**
 * Class generated from <tt>veins/modules/Prext/base/messages/VehicleReply.msg:7</tt> by nedtool.
 * <pre>
 * message VehicleReply extends WaveShortMessage
 * {
 *     int enteredMixZone; //The Mix-Zone the vehicle is going to leave 
 *     Coord senderVel;
 *     double senderAngle;
 *     string edge;
 *     uint64_t senderPsynm;
 * }
 * </pre>
 */
class VehicleReply : public ::WaveShortMessage
{
  protected:
    int enteredMixZone;
    Coord senderVel;
    double senderAngle;
    ::omnetpp::opp_string edge;
    uint64_t senderPsynm;

  private:
    void copy(const VehicleReply& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VehicleReply&);

  public:
    VehicleReply(const char *name=nullptr, int kind=0);
    VehicleReply(const VehicleReply& other);
    virtual ~VehicleReply();
    VehicleReply& operator=(const VehicleReply& other);
    virtual VehicleReply *dup() const {return new VehicleReply(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getEnteredMixZone() const;
    virtual void setEnteredMixZone(int enteredMixZone);
    virtual Coord& getSenderVel();
    virtual const Coord& getSenderVel() const {return const_cast<VehicleReply*>(this)->getSenderVel();}
    virtual void setSenderVel(const Coord& senderVel);
    virtual double getSenderAngle() const;
    virtual void setSenderAngle(double senderAngle);
    virtual std::string getEdge() const;
    virtual void setEdge(std::string edge);
    virtual uint64_t getSenderPsynm() const;
    virtual void setSenderPsynm(uint64_t senderPsynm);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleReply& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleReply& obj) {obj.parsimUnpack(b);}


#endif // ifndef __VEHICLEREPLY_M_H

